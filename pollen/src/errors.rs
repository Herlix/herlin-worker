use crate::body::Body;
use crate::response::HttpResponse;
use header::{InvalidHeaderName, InvalidHeaderValue};
use http::{
    header,
    method::InvalidMethod,
    status::InvalidStatusCode,
    uri::{InvalidUri, InvalidUriParts},
    StatusCode,
};
use pollen_keyvault::JSError;
use std::fmt::{Debug, Display};

/// General purpose error
///
/// This error is used to carry errors from std::error
/// It can be crated through converting errors with into()
///
/// A response can be created through the ResponseError boxed within
#[derive(Debug)]
pub struct Error {
    cause: Box<dyn ResponseError>,
}

pub trait ResponseError: Debug + Display {
    /// Response's status code
    ///
    /// Internal server error is generated by default
    fn status_code(&self) -> StatusCode {
        StatusCode::INTERNAL_SERVER_ERROR
    }

    fn error_response(&self) -> HttpResponse {
        let mut resp = HttpResponse::new(self.status_code());
        resp.headers_mut().insert(
            header::CONTENT_TYPE,
            header::HeaderValue::from_static("text/plain; charset=utf-8"),
        );
        resp.set_body(Body::Message("Internal server error".to_string()));
        resp
    }
}

#[derive(Debug)]
pub struct HttpError {
    inner: ErrorKind,
}

impl From<InvalidHeaderValue> for HttpError {
    fn from(v: InvalidHeaderValue) -> Self {
        HttpError {
            inner: ErrorKind::HeaderValue(v),
        }
    }
}

impl From<InvalidMethod> for HttpError {
    fn from(v: InvalidMethod) -> Self {
        HttpError {
            inner: ErrorKind::Method(v),
        }
    }
}

impl From<InvalidStatusCode> for HttpError {
    fn from(v: InvalidStatusCode) -> Self {
        HttpError {
            inner: ErrorKind::StatusCode(v),
        }
    }
}
impl From<InvalidUri> for HttpError {
    fn from(v: InvalidUri) -> Self {
        HttpError {
            inner: ErrorKind::Uri(v),
        }
    }
}
impl From<InvalidUriParts> for HttpError {
    fn from(v: InvalidUriParts) -> Self {
        HttpError {
            inner: ErrorKind::UriParts(v),
        }
    }
}
impl From<InvalidHeaderName> for HttpError {
    fn from(v: InvalidHeaderName) -> Self {
        HttpError {
            inner: ErrorKind::HeaderName(v),
        }
    }
}

impl Display for HttpError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Inner: {}", self.inner)
    }
}

impl ResponseError for HttpError {
    fn status_code(&self) -> StatusCode {
        StatusCode::INTERNAL_SERVER_ERROR
    }
    fn error_response(&self) -> HttpResponse {
        let mut resp = HttpResponse::new(self.status_code());
        resp.headers_mut().insert(
            header::CONTENT_TYPE,
            http::HeaderValue::from_static("text/plain; charset=utf-8"),
        );
        resp.set_body(Body::Message("Internal server error".to_string()));
        resp
    }
}

impl Into<Error> for HttpError {
    fn into(self) -> Error {
        Error {
            cause: Box::new(self),
        }
    }
}

/// Http errors from the http crate
///
/// Each error type has a conversion using .Into to generate a HttpError
#[derive(Debug)]
enum ErrorKind {
    StatusCode(InvalidStatusCode),
    Method(InvalidMethod),
    Uri(InvalidUri),
    UriParts(InvalidUriParts),
    HeaderName(InvalidHeaderName),
    HeaderValue(InvalidHeaderValue),
}

impl Display for ErrorKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self)
    }
}

#[derive(Debug)]
pub struct ServerError {
    msg: String,
}

impl ResponseError for ServerError {
    fn status_code(&self) -> StatusCode {
        StatusCode::INTERNAL_SERVER_ERROR
    }
    fn error_response(&self) -> HttpResponse {
        let mut resp = HttpResponse::new(self.status_code());
        resp.headers_mut().insert(
            header::CONTENT_TYPE,
            http::HeaderValue::from_static("text/plain; charset=utf-8"),
        );
        resp.set_body(Body::Message(self.msg.to_string()));
        resp
    }
}

impl Into<Error> for ServerError {
    fn into(self) -> Error {
        Error {
            cause: Box::new(self),
        }
    }
}

impl From<serde_json::error::Error> for ServerError {
    fn from(v: serde_json::error::Error) -> Self {
        ServerError { msg: v.to_string() }
    }
}

impl Display for ServerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Inner: {}", self.msg)
    }
}

impl From<JSError> for ServerError {
    fn from(msg: JSError) -> Self {
        ServerError { msg: msg.msg }
    }
}
